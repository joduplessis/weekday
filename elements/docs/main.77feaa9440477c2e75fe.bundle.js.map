{"version":3,"file":"main.77feaa9440477c2e75fe.bundle.js","sources":["webpack:///./src/button/index.tsx"],"sourcesContent":["import * as React from \"react\";\nimport styled from \"styled-components\";\nimport { COLORS } from \"../colors\";\n\nconst Container = styled.button<{\n  size?: string,\n  theme: string,\n  disabled?: boolean,\n}>`\n  box-sizing: border-box;\n  width: auto;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  align-content: center;\n  justify-content: center;\n  background-size: cover;\n  position: relative;\n  transition: background-color 0.15s, color 0.15s, border 0.15s;\n  cursor: pointer;\n  max-width: ${props => {\n    switch (props.size) {\n      case \"large\":\n        return \"300px\";\n      case \"small\":\n        return \"fit-content\";\n      default:\n        return \"150px\";\n    }\n  }};\n  height: ${props  => {\n    switch (props.size) {\n      case \"large\":\n        return \"80px\";\n      case \"small\":\n        return \"30px\";\n      default:\n        return \"40px\";\n    }\n  }};\n  border-radius: ${props => {\n    switch (props.size) {\n      case \"large\":\n        return \"10px\";\n      case \"small\":\n        return \"6px\";\n      default:\n        return \"8px\";\n    }\n  }};\n  border-width: ${props => {\n    switch (props.size) {\n      case \"large\":\n        return \"2px\";\n      case \"small\":\n        return \"1px\";\n      default:\n        return \"2px\";\n    }\n  }};\n  border-style: solid;\n  background-color: ${props => COLORS[props.theme].BASE.BACKGROUND_COLOR};\n  color: ${props => COLORS[props.theme].BASE.COLOR};\n  border-color: ${props => COLORS[props.theme].BASE.BORDER_COLOR};\n\n  &:hover {\n    background-color: ${props => COLORS[props.theme].HOVER.BACKGROUND_COLOR};\n    color: ${props => COLORS[props.theme].HOVER.COLOR};\n    border-color: ${props => COLORS[props.theme].HOVER.BORDER_COLOR};\n  }\n\n  &.active {\n    background-color: ${props => COLORS[props.theme].ACTIVE.BACKGROUND_COLOR} !important;\n    color: ${props => COLORS[props.theme].ACTIVE.COLOR} !important;\n    border-color: ${props => COLORS[props.theme].ACTIVE.BORDER_COLOR} !important;\n  }\n\n  &:disabled {\n    opacity: 0.5 !important;\n  }\n`;\n\nconst Text = styled.span<{\n  icon?: any,\n  theme: string,\n  size?: string,\n}>`\n  margin: 0px;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  font-family: -apple-system, BlinkMacSystemFont,\n  \"Segoe UI\", \"Roboto\", \"Oxygen\",\n  \"Ubuntu\", \"Cantarell\", \"Fira Sans\",\n  \"Droid Sans\", \"Helvetica Neue\", sans-serif;\n  padding: ${props => {\n    if (props.icon) {\n      switch (props.size) {\n        case \"large\":\n          return \"0px 30px 0px 15px\";\n        case \"small\":\n          return \"0px 10px 0px 5px\";\n        default:\n          return \"0px 15px 0px 8px\";\n      }\n    } else {\n      switch (props.size) {\n        case \"large\":\n          return \"0px 30px 0px 30px\";\n        case \"small\":\n          return \"0px 10px 0px 10px\";\n        default:\n          return \"0px 15px 0px 15px\";\n      }\n    }\n  }};\n  font-weight: ${props => {\n    switch (props.size) {\n      case \"large\":\n        return \"500\";\n      case \"small\":\n        return \"500\";\n      default:\n        return \"500\";\n    }\n  }};\n  font-size: ${props => {\n    switch (props.size) {\n      case \"large\":\n        return \"24px\";\n      case \"small\":\n        return \"11px\";\n      default:\n        return \"14px\";\n    }\n  }};\n`;\n\nconst Icon = styled.div<{\n  size?: string,\n  text?: string,\n}>`\n  margin: ${props => {\n    if (!props.text) return \"0px 10px 0px 10px\";\n    if (!props.text && props.size) return \"0px 20px 0px 20px\";\n    if (props.size) return \"0px 0px 0px 30px\";\n\n    return \"0px 0px 0px 15px\";\n  }};\n`;\n\ninterface IButtonProps {\n  /**\n   * Icon to display next to text,\n   *\n   * @default null\n   */\n  icon?: any;\n\n  /**\n   * Value to display, either empty (\" \") or string value\n   *\n   * @default \" \"\n   */\n  text?: string;\n\n  /**\n   * Colour theme for button\n   *\n   * @default \" \" (blue)\n   */\n  theme?: string;\n\n  /**\n   * Button disabled value\n   *\n   * @default null\n   */\n  disabled?: boolean;\n\n  /**\n   * Possible values are \"small\" | \"medium\" | \"large\"\n   *\n   * @default false\n   */\n  size?: string;\n\n  /**\n   * React classname property\n   *\n   * @default null\n   */\n  className?: string;\n\n  /** Called when an empty cell is clicked. */\n  onClick?: any;\n}\n\n/**\n * Button component.\n */\nexport const Button: React.FunctionComponent<IButtonProps> = (props: IButtonProps) => {\n  const [down, setDown] = React.useState(false);\n  const theme: string = props.theme ? props.theme : \"default\";\n  const className = down ? \"active \" + props.className : props.className;\n\n  return (\n    <Container\n      size={props.size}\n      theme={theme}\n      className={className}\n      onClick={props.onClick}\n      onMouseDown={() => setDown(true)}\n      onMouseUp={() => setDown(false)}\n      {...props}>\n      {props.icon && (\n        <Icon\n          text={props.text}\n          size={props.size}>\n          {props.icon}\n        </Icon>\n      )}\n      {props.text && (\n        <Text\n          icon={props.icon}\n          theme={theme}\n          size={props.size}>\n          {props.text}\n        </Text>\n      )}\n    </Container>\n  );\n};\ntry {\n    // @ts-ignore\n    Button.displayName = \"Button\";\n    // @ts-ignore\n    Button.__docgenInfo = { \"description\": \"Button component.\", \"displayName\": \"Button\", \"props\": { \"icon\": { \"defaultValue\": { value: \"null\" }, \"description\": \"Icon to display next to text,\", \"name\": \"icon\", \"required\": false, \"type\": { \"name\": \"any\" } }, \"text\": { \"defaultValue\": { value: \"\\\" \\\"\" }, \"description\": \"Value to display, either empty (\\\" \\\") or string value\", \"name\": \"text\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"theme\": { \"defaultValue\": { value: \"\\\" \\\" (blue)\" }, \"description\": \"Colour theme for button\", \"name\": \"theme\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"disabled\": { \"defaultValue\": { value: \"null\" }, \"description\": \"Button disabled value\", \"name\": \"disabled\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"size\": { \"defaultValue\": { value: \"false\" }, \"description\": \"Possible values are \\\"small\\\" | \\\"medium\\\" | \\\"large\\\"\", \"name\": \"size\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"className\": { \"defaultValue\": { value: \"null\" }, \"description\": \"React classname property\", \"name\": \"className\", \"required\": false, \"type\": { \"name\": \"string\" } }, \"onClick\": { \"defaultValue\": null, \"description\": \"Called when an empty cell is clicked.\", \"name\": \"onClick\", \"required\": false, \"type\": { \"name\": \"any\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/button/index.tsx#Button\"] = { docgenInfo: Button.__docgenInfo, name: \"Button\", path: \"src/button/index.tsx#Button\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }"],"mappings":"AAAA","sourceRoot":""}